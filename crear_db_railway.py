import psycopg2
import os
from dotenv import load_dotenv
load_dotenv()
# URL completa, o usa variable de entorno en producci√≥n
DATABASE_URL = os.getenv('DATABASE_URL')

def crear_db_postgres():
    conn = None
    cur = None
    try:
        print("üîó Conectando a la base de datos PostgreSQL...")
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()

        print("üóëÔ∏è Eliminando tablas anteriores (si existen)...")
        cur.execute("DROP TABLE IF EXISTS responses, users, options, questions CASCADE;")

        print("üõ†Ô∏è Creando nuevas tablas...")
        cur.execute('''
            CREATE TABLE questions (
                id SERIAL PRIMARY KEY,
                texto TEXT NOT NULL
            )
        ''')

        cur.execute('''
            CREATE TABLE options (
                id SERIAL PRIMARY KEY,
                pregunta_id INTEGER REFERENCES questions (id) ON DELETE CASCADE,
                texto TEXT NOT NULL,
                puntaje INTEGER NOT NULL DEFAULT 0
            )
        ''')

        cur.execute('''
            CREATE TABLE users (
                id SERIAL PRIMARY KEY,
                nombre TEXT NOT NULL,
                email TEXT NOT NULL,
                edad INTEGER NOT NULL,
                sexo TEXT NOT NULL,
                puntaje_total INTEGER DEFAULT 0,
                clasificacion TEXT DEFAULT 'leve',
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        cur.execute('''
            CREATE TABLE responses (
                id SERIAL PRIMARY KEY,
                user_id INTEGER REFERENCES users (id) ON DELETE CASCADE,
                pregunta_id INTEGER REFERENCES questions (id),
                respuesta INTEGER REFERENCES options (id),
                puntaje INTEGER DEFAULT 0,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        print("üìä Insertando preguntas...")
        questions = [
            "¬øC√≥mo describir√≠as el ambiente en tu hogar?",
            "¬øTe han hecho sentir miedo, humillado/a o culpable dentro de tu familia recientemente?",
            "¬øTe han hecho sentir miedo con miradas, gestos o silencios prolongados?",
            "¬øA qui√©n acudir√≠as si te sintieras en peligro dentro de tu hogar?",
            "¬øAlguna vez alguien en tu familia te ha golpeado, empujado o agredido f√≠sicamente?",
            "¬øHas presenciado actos de violencia hacia ti u otros miembros de tu familia?"
        ]

        for q in questions:
            cur.execute("INSERT INTO questions (texto) VALUES (%s)", (q,))

        print("üß© Insertando opciones...")
        options = [
            # (pregunta_id, texto, puntaje)
            (1, "Tranquilo y de respeto mutuo", 0),
            (1, "A veces tenso, con discusiones espor√°dicas", 1),
            (1, "Frecuentemente hay gritos, insultos o agresiones", 2),
            (1, "Me siento inc√≥modo/a o inseguro/a en casa", 3),

            (2, "No, nunca", 0),
            (2, "A veces, pero no s√© si es normal", 1),
            (2, "S√≠, con frecuencia", 2),
            (2, "S√≠, siempre", 3),

            (3, "No, nunca", 0),
            (3, "A veces", 1),
            (3, "S√≠, frecuentemente", 2),
            (3, "S√≠, constantemente", 3),

            (4, "A un amigo/familiar de confianza", 0),
            (4, "A un profesional de salud, asistente social o Carabineros", 1),
            (4, "No sabr√≠a qu√© hacer", 2),
            (4, "No tengo a qui√©n acudir", 3),

            (5, "No, nunca", 0),
            (5, "Una vez, en una situaci√≥n puntual", 1),
            (5, "Varias veces", 2),
            (5, "S√≠, actualmente ocurre", 3),

            (6, "No", 0),
            (6, "S√≠, una vez", 1),
            (6, "Varias veces", 2),
            (6, "S√≠, recientemente", 3),
        ]

        for pregunta_id, texto, puntaje in options:
            cur.execute("INSERT INTO options (pregunta_id, texto, puntaje) VALUES (%s, %s, %s)", 
                        (pregunta_id, texto, puntaje))

        conn.commit()
        print("‚úÖ ¬°Base de datos PostgreSQL inicializada correctamente!")

    except Exception as e:
        print(f"‚ùå Error: {e}")
        if conn:
            conn.rollback()
    finally:
        if cur:
            cur.close()
        if conn:
            conn.close()

if __name__ == '__main__':
    crear_db_postgres()